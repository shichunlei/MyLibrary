package com.chingtech.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.chingtech.sample.bean.WanNianLiBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WAN_NIAN_LI_BEAN".
*/
public class WanNianLiBeanDao extends AbstractDao<WanNianLiBean, Long> {

    public static final String TABLENAME = "WAN_NIAN_LI_BEAN";

    /**
     * Properties of entity WanNianLiBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property Nongli = new Property(2, String.class, "nongli", false, "NONGLI");
        public final static Property Week = new Property(3, String.class, "week", false, "WEEK");
        public final static Property Shengxiao = new Property(4, String.class, "shengxiao", false, "SHENGXIAO");
        public final static Property Star = new Property(5, String.class, "star", false, "STAR");
        public final static Property Taishen = new Property(6, String.class, "taishen", false, "TAISHEN");
        public final static Property Wuxing = new Property(7, String.class, "wuxing", false, "WUXING");
        public final static Property Chong = new Property(8, String.class, "chong", false, "CHONG");
        public final static Property Sha = new Property(9, String.class, "sha", false, "SHA");
        public final static Property Jiri = new Property(10, String.class, "jiri", false, "JIRI");
        public final static Property Zhiri = new Property(11, String.class, "zhiri", false, "ZHIRI");
        public final static Property Xiongshen = new Property(12, String.class, "xiongshen", false, "XIONGSHEN");
        public final static Property Jishenyiqu = new Property(13, String.class, "jishenyiqu", false, "JISHENYIQU");
        public final static Property Caishen = new Property(14, String.class, "caishen", false, "CAISHEN");
        public final static Property Xishen = new Property(15, String.class, "xishen", false, "XISHEN");
        public final static Property Fushen = new Property(16, String.class, "fushen", false, "FUSHEN");
        public final static Property Suici = new Property(17, String.class, "suici", false, "SUICI");
        public final static Property Yi = new Property(18, String.class, "yi", false, "YI");
        public final static Property Ji = new Property(19, String.class, "ji", false, "JI");
    }


    public WanNianLiBeanDao(DaoConfig config) {
        super(config);
    }
    
    public WanNianLiBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WAN_NIAN_LI_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"DATE\" TEXT," + // 1: date
                "\"NONGLI\" TEXT," + // 2: nongli
                "\"WEEK\" TEXT," + // 3: week
                "\"SHENGXIAO\" TEXT," + // 4: shengxiao
                "\"STAR\" TEXT," + // 5: star
                "\"TAISHEN\" TEXT," + // 6: taishen
                "\"WUXING\" TEXT," + // 7: wuxing
                "\"CHONG\" TEXT," + // 8: chong
                "\"SHA\" TEXT," + // 9: sha
                "\"JIRI\" TEXT," + // 10: jiri
                "\"ZHIRI\" TEXT," + // 11: zhiri
                "\"XIONGSHEN\" TEXT," + // 12: xiongshen
                "\"JISHENYIQU\" TEXT," + // 13: jishenyiqu
                "\"CAISHEN\" TEXT," + // 14: caishen
                "\"XISHEN\" TEXT," + // 15: xishen
                "\"FUSHEN\" TEXT," + // 16: fushen
                "\"SUICI\" TEXT," + // 17: suici
                "\"YI\" TEXT," + // 18: yi
                "\"JI\" TEXT);"); // 19: ji
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WAN_NIAN_LI_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WanNianLiBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String nongli = entity.getNongli();
        if (nongli != null) {
            stmt.bindString(3, nongli);
        }
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(4, week);
        }
 
        String shengxiao = entity.getShengxiao();
        if (shengxiao != null) {
            stmt.bindString(5, shengxiao);
        }
 
        String star = entity.getStar();
        if (star != null) {
            stmt.bindString(6, star);
        }
 
        String taishen = entity.getTaishen();
        if (taishen != null) {
            stmt.bindString(7, taishen);
        }
 
        String wuxing = entity.getWuxing();
        if (wuxing != null) {
            stmt.bindString(8, wuxing);
        }
 
        String chong = entity.getChong();
        if (chong != null) {
            stmt.bindString(9, chong);
        }
 
        String sha = entity.getSha();
        if (sha != null) {
            stmt.bindString(10, sha);
        }
 
        String jiri = entity.getJiri();
        if (jiri != null) {
            stmt.bindString(11, jiri);
        }
 
        String zhiri = entity.getZhiri();
        if (zhiri != null) {
            stmt.bindString(12, zhiri);
        }
 
        String xiongshen = entity.getXiongshen();
        if (xiongshen != null) {
            stmt.bindString(13, xiongshen);
        }
 
        String jishenyiqu = entity.getJishenyiqu();
        if (jishenyiqu != null) {
            stmt.bindString(14, jishenyiqu);
        }
 
        String caishen = entity.getCaishen();
        if (caishen != null) {
            stmt.bindString(15, caishen);
        }
 
        String xishen = entity.getXishen();
        if (xishen != null) {
            stmt.bindString(16, xishen);
        }
 
        String fushen = entity.getFushen();
        if (fushen != null) {
            stmt.bindString(17, fushen);
        }
 
        String suici = entity.getSuici();
        if (suici != null) {
            stmt.bindString(18, suici);
        }
 
        String yi = entity.getYi();
        if (yi != null) {
            stmt.bindString(19, yi);
        }
 
        String ji = entity.getJi();
        if (ji != null) {
            stmt.bindString(20, ji);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WanNianLiBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String nongli = entity.getNongli();
        if (nongli != null) {
            stmt.bindString(3, nongli);
        }
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(4, week);
        }
 
        String shengxiao = entity.getShengxiao();
        if (shengxiao != null) {
            stmt.bindString(5, shengxiao);
        }
 
        String star = entity.getStar();
        if (star != null) {
            stmt.bindString(6, star);
        }
 
        String taishen = entity.getTaishen();
        if (taishen != null) {
            stmt.bindString(7, taishen);
        }
 
        String wuxing = entity.getWuxing();
        if (wuxing != null) {
            stmt.bindString(8, wuxing);
        }
 
        String chong = entity.getChong();
        if (chong != null) {
            stmt.bindString(9, chong);
        }
 
        String sha = entity.getSha();
        if (sha != null) {
            stmt.bindString(10, sha);
        }
 
        String jiri = entity.getJiri();
        if (jiri != null) {
            stmt.bindString(11, jiri);
        }
 
        String zhiri = entity.getZhiri();
        if (zhiri != null) {
            stmt.bindString(12, zhiri);
        }
 
        String xiongshen = entity.getXiongshen();
        if (xiongshen != null) {
            stmt.bindString(13, xiongshen);
        }
 
        String jishenyiqu = entity.getJishenyiqu();
        if (jishenyiqu != null) {
            stmt.bindString(14, jishenyiqu);
        }
 
        String caishen = entity.getCaishen();
        if (caishen != null) {
            stmt.bindString(15, caishen);
        }
 
        String xishen = entity.getXishen();
        if (xishen != null) {
            stmt.bindString(16, xishen);
        }
 
        String fushen = entity.getFushen();
        if (fushen != null) {
            stmt.bindString(17, fushen);
        }
 
        String suici = entity.getSuici();
        if (suici != null) {
            stmt.bindString(18, suici);
        }
 
        String yi = entity.getYi();
        if (yi != null) {
            stmt.bindString(19, yi);
        }
 
        String ji = entity.getJi();
        if (ji != null) {
            stmt.bindString(20, ji);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public WanNianLiBean readEntity(Cursor cursor, int offset) {
        WanNianLiBean entity = new WanNianLiBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nongli
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // week
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // shengxiao
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // star
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // taishen
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // wuxing
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // chong
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sha
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // jiri
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // zhiri
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // xiongshen
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // jishenyiqu
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // caishen
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // xishen
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // fushen
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // suici
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // yi
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // ji
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WanNianLiBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNongli(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWeek(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShengxiao(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTaishen(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWuxing(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setChong(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSha(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setJiri(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setZhiri(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setXiongshen(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setJishenyiqu(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCaishen(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setXishen(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setFushen(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSuici(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setYi(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setJi(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WanNianLiBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WanNianLiBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WanNianLiBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
