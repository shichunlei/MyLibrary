package com.chingtech.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.chingtech.sample.bean.CarBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CAR_BEAN".
*/
public class CarBeanDao extends AbstractDao<CarBean, String> {

    public static final String TABLENAME = "CAR_BEAN";

    /**
     * Properties of entity CarBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Initial = new Property(2, String.class, "initial", false, "INITIAL");
        public final static Property Parentid = new Property(3, String.class, "parentid", false, "PARENTID");
        public final static Property Logo = new Property(4, String.class, "logo", false, "LOGO");
        public final static Property Depth = new Property(5, String.class, "depth", false, "DEPTH");
    }


    public CarBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CarBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CAR_BEAN\" (" + //
                "\"_id\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"INITIAL\" TEXT," + // 2: initial
                "\"PARENTID\" TEXT," + // 3: parentid
                "\"LOGO\" TEXT," + // 4: logo
                "\"DEPTH\" TEXT);"); // 5: depth
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CAR_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CarBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String initial = entity.getInitial();
        if (initial != null) {
            stmt.bindString(3, initial);
        }
 
        String parentid = entity.getParentid();
        if (parentid != null) {
            stmt.bindString(4, parentid);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(5, logo);
        }
 
        String depth = entity.getDepth();
        if (depth != null) {
            stmt.bindString(6, depth);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CarBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String initial = entity.getInitial();
        if (initial != null) {
            stmt.bindString(3, initial);
        }
 
        String parentid = entity.getParentid();
        if (parentid != null) {
            stmt.bindString(4, parentid);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(5, logo);
        }
 
        String depth = entity.getDepth();
        if (depth != null) {
            stmt.bindString(6, depth);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CarBean readEntity(Cursor cursor, int offset) {
        CarBean entity = new CarBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // initial
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // parentid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // logo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // depth
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CarBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInitial(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParentid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLogo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDepth(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CarBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(CarBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CarBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
